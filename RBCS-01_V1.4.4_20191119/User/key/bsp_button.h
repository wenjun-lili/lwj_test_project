 
#ifndef __BSP_BUTTON_H
#define __BSP_BUTTON_H

#include "stm32f10x.h"

/* 按键滤波时间50ms, 单位10ms
 只有连续检测到50ms状态不变才认为有效，包括弹起和按下两种事件
 即使按键电路不做硬件滤波，该滤波机制也可以保证可靠地检测到按键事件 
*/
#define BUTTON_FILTER_TIME 	5
#define BUTTON_LONG_TIME  100  /*持续1S认为长按时间*/ 

/*
	每个按键对应1个全局的结构体变量。
	其成员变量是实现滤波和多种按键状态所必须的
*/
typedef struct
{
	/* 下面是一个函数指针，指向判断按键手否按下的函数 */
	uint8_t (*IsKeyDownFunc)(void); /* 函数指针 按键按下的判断函数,1表示按下 */
	uint8_t Count;			/* 滤波器计数器 */
	uint8_t FilterTime;		/* 滤波时间(最大255,表示2550ms) */
	uint16_t LongCount; /*长按计数器*/
	uint16_t LongTime;/*按键按下持续时间，0表示不检测长按*/
	uint8_t State;			/* 按键当前状态（按下还是弹起） */
  
	uint8_t KeyCodeUp ;/*按键弹起的键值代码，0表示不检测按键弹起*/
	uint8_t KeyCodeDown;/*按键按下的键值代码，0表示不检测按键按下*/ 
	uint8_t KeyCodeLong; /*按键长按的键值代码，0表示不检测长按*/ 
	uint8_t RepeatSpeed;/*连续按键周期*/ 
	uint8_t RepeatCount;/*连续按键计数器*/ 
}BUTTON_T;

/* 定义键值代码
	推荐使用enum, 不用#define，原因：
	(1) 便于新增键值,方便调整顺序，使代码看起来舒服点
	(2)	编译器可帮我们避免键值重复。
*/
typedef enum
{
  KEY_NONE = 0,	/* 0 表示无按键事件 */
	
	KEY_DOWN_RUN, 	/* RUN键按下 */
	KEY_UP_RUN,  		/* RUN键弹起 */
	
	KEY_DOWN_PHOTOL,/*PHOTOL键按下*/
	KEY_UP_PHOTOL,/*PHOTOL键弹起*/
	
	KEY_DOWN_DEC,/*DEC键按下*/
	KEY_UP_DEC,/*DEC键弹起*/
	KEY_LONG_DEC,/*DEC键长按*/
	
	KEY_DOWN_INC,/*INC键按下*/
	KEY_UP_INC,/*INC键弹起*/
	KEY_LONG_INC,/*INC键长按*/
	
	KEY_DOWN_SET,/*SET键按下*/
	KEY_UP_SET,/*SET键弹起*/
	
	KEY_DOWN_PHOTOR,/*PHOTOR键按下*/
	KEY_UP_PHOTOR,/*PHOTOR键弹起*/
	
} KEY_ENUM;

/* 按键ID */
enum
{
	RUN_KEY=0,       // ID 0
	PHOTOL_KEY,      //    1
	DEC_KEY,         //    2
	INC_KEY,         //    3
	SET_KEY,         //    4
	PHOTOR_KEY,      //    5
 
	
	/*下面三个按键保留不定义*/
//	NA1_KEY,      //    7
//  NA2_KEY,      //    8
//	NA3_KEY       //    9
};

/* 按键FIFO用到变量 */
#define KEY_FIFO_SIZE	 20
typedef struct
{ 
	////uint8_t Id[KEY_FIFO_SIZE];
	uint8_t Buf[KEY_FIFO_SIZE];		/* 键值缓冲区 */
	uint8_t Read;					/* 缓冲区读指针 */
	uint8_t Write;				/* 缓冲区写指针 */
}KEY_FIFO_T;

/* 供外部调用的函数声明 */
void bsp_InitButton(void);
void bsp_PutKey(uint8_t _KeyCode);
uint8_t bsp_GetKey(void);
uint8_t MK_KeyValid(uint8_t fifokeyid, uint8_t matchedkeyid);

void bsp_KeyScan(void);
uint8_t bsp_KeyState(uint8_t _ucKeyID);
void MKeyProcess(void);
#endif
